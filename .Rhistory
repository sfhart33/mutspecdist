exp_cnv_plot
non_exp_cnv_plot
test_matrix <- CNV_matrix %>%
apply(2,function(x){x/sum(x)}) # for freq not counts
spectra1 <- rowSums(test_matrix[,samples_exp], na.rm=TRUE)
spectra2 <- rowSums(test_matrix[,samples_nonexp], na.rm=TRUE)
exp_cnv_plot <- as.data.frame(spectra1) %>%
rownames_to_column(var = "MuType") %>%
ggplot(aes(MuType, spectra1))+
geom_col()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle("CNV spectra: professionally exposed to asbestos (mean)")
non_exp_cnv_plot <- as.data.frame(spectra2) %>%
rownames_to_column(var = "MuType") %>%
ggplot(aes(MuType, spectra2))+
geom_col()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle("CNV spectra: NOT professionally exposed to asbestos (mean)")
exp_cnv_plot
non_exp_cnv_plot
spectra1 <- rowSums(CNV_matrix[,samples_exp], na.rm=TRUE)
spectra2 <- rowSums(CNV_matrix[,samples_nonexp], na.rm=TRUE)
exp_cnv_plot <- as.data.frame(spectra1) %>%
rownames_to_column(var = "MuType") %>%
ggplot(aes(MuType, spectra1))+
geom_col()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle("CNV spectra: professionally exposed to asbestos (sum)")
non_exp_cnv_plot <- as.data.frame(spectra2) %>%
rownames_to_column(var = "MuType") %>%
ggplot(aes(MuType, spectra2))+
geom_col()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle("CNV spectra: NOT professionally exposed to asbestos (sum)")
exp_cnv_plot
non_exp_cnv_plot
test_matrix <- CNV_matrix %>%
apply(2,function(x){x/sum(x)}) # for freq not counts
#%>% colSums()
# Regular comparison:
set <- samples %>% filter(Professional.Asbestos %in% c("Exposed","Non exposed")) %>%
filter(Sample %in% colnames(test_matrix))
samples_exp <- filter(samples, Professional.Asbestos == "Exposed")%>%
filter(Sample %in% colnames(test_matrix)) %>%
pull(Sample)
samples_nonexp <- filter(samples, Professional.Asbestos == "Non exposed")%>%
filter(Sample %in% colnames(test_matrix)) %>%
pull(Sample)
spectra1 <- rowMeans(test_matrix[,samples_exp], na.rm=TRUE)
spectra2 <- rowMeans(test_matrix[,samples_nonexp], na.rm=TRUE)
spectra1
spectra2
sim1 <- cosine_sim(spectra1, spectra2)
sim1
# RUN PERMUTATIONS
dist_rands <- c()
for(k in 1:10000){
# randomly resuffle  within this set
set$rand <- set %>%
pull(Professional.Asbestos) %>%
sample()
rand1 <- set %>%
filter(rand == "Exposed") %>%
pull(Sample)
rand2 <- set %>%
filter(rand == "Non exposed") %>%
pull(Sample)
spectra1 <- rowMeans(test_matrix[,rand1], na.rm=TRUE)
spectra2 <- rowMeans(test_matrix[,rand2], na.rm=TRUE)
# get distance and save to vector
dist_rand <- cosine_sim(spectra1, spectra2)
dist_rands <- c(dist_rands, dist_rand)
}
# plot histogram of permutation results
pvalue <- max(c(length(dist_rands[dist_rands<=as.numeric(sim1)])/length(dist_rands), 1/2000))
#if(pvalue < 0.99){
plot1 <- data.frame(sims = dist_rands) %>%
ggplot(aes(sims)) +
geom_histogram()+
geom_vline(xintercept = sim1)+
xlab("Cosine similarity")+
ggtitle(paste("Asbestos exposure CNV spectra (mean mutations across samples)\nComparison to permutation null distribution, p = ", pvalue))
print(plot1)
CNV_plot <- plot1
#}
test_matrix <- SV_matrix %>%
apply(2,function(x){x/sum(x)}) # for freq not counts
# Regular comparison:
set <- samples %>% filter(Professional.Asbestos %in% c("Exposed","Non exposed")) %>%
filter(Sample %in% colnames(test_matrix))
samples_exp <- filter(samples, Professional.Asbestos == "Exposed")%>%
filter(Sample %in% colnames(test_matrix)) %>%
pull(Sample)
samples_nonexp <- filter(samples, Professional.Asbestos == "Non exposed")%>%
filter(Sample %in% colnames(test_matrix)) %>%
pull(Sample)
spectra1 <- rowMeans(test_matrix[,samples_exp], na.rm=TRUE)
spectra2 <- rowMeans(test_matrix[,samples_nonexp], na.rm=TRUE)
spectra1
spectra2
sim1 <- cosine_sim(spectra1, spectra2)
sim1
# RUN PERMUTATIONS
dist_rands <- c()
for(k in 1:10000){
# randomly resuffle  within this set
set$rand <- set %>%
pull(Professional.Asbestos) %>%
sample()
rand1 <- set %>%
filter(rand == "Exposed") %>%
pull(Sample)
rand2 <- set %>%
filter(rand == "Non exposed") %>%
pull(Sample)
spectra1 <- rowMeans(test_matrix[,rand1], na.rm=TRUE)
spectra2 <- rowMeans(test_matrix[,rand2], na.rm=TRUE)
# get distance and save to vector
dist_rand <- cosine_sim(spectra1, spectra2)
dist_rands <- c(dist_rands, dist_rand)
}
# plot histogram of permutation results
pvalue <- max(c(length(dist_rands[dist_rands<=as.numeric(sim1)])/length(dist_rands), 1/2000))
#if(pvalue < 0.99){
plot1 <- data.frame(sims = dist_rands) %>%
ggplot(aes(sims)) +
geom_histogram()+
geom_vline(xintercept = sim1)+
xlab("Cosine similarity")+
ggtitle(paste("Asbestos exposure SV spectra\nComparison to permutation null distribution, p = ", pvalue))
print(plot1)
SV_plt <- plot1
#}
test_matrix <- CNV_matrix %>%
apply(2,function(x){x/sum(x)}) # for freq not counts
spectra1 <- rowMeans(test_matrix[,samples_exp], na.rm=TRUE)
spectra2 <- rowMeans(test_matrix[,samples_nonexp], na.rm=TRUE)
exp_cnv_plot <- as.data.frame(spectra1) %>%
rownames_to_column(var = "MuType") %>%
ggplot(aes(MuType, spectra1))+
geom_col()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle("CNV spectra: professionally exposed to asbestos (mean)")
non_exp_cnv_plot <- as.data.frame(spectra2) %>%
rownames_to_column(var = "MuType") %>%
ggplot(aes(MuType, spectra2))+
geom_col()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle("CNV spectra: NOT professionally exposed to asbestos (mean)")
exp_cnv_plot
non_exp_cnv_plot
spectra1 <- rowSums(CNV_matrix[,samples_exp], na.rm=TRUE)
spectra2 <- rowSums(CNV_matrix[,samples_nonexp], na.rm=TRUE)
exp_cnv_plot <- as.data.frame(spectra1) %>%
rownames_to_column(var = "MuType") %>%
ggplot(aes(MuType, spectra1))+
geom_col()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle("CNV spectra: professionally exposed to asbestos (sum)")
non_exp_cnv_plot <- as.data.frame(spectra2) %>%
rownames_to_column(var = "MuType") %>%
ggplot(aes(MuType, spectra2))+
geom_col()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle("CNV spectra: NOT professionally exposed to asbestos (sum)")
exp_cnv_plot
non_exp_cnv_plot
test_matrix <- CNV_matrix %>%
apply(2,function(x){x/sum(x)}) # for freq not counts
spectra1 <- rowMeans(test_matrix[,samples_exp], na.rm=TRUE)
spectra2 <- rowMeans(test_matrix[,samples_nonexp], na.rm=TRUE)
exp_cnv_plot <- as.data.frame(spectra1) %>%
rownames_to_column(var = "MuType") %>%
ggplot(aes(MuType, spectra1))+
geom_col()+
ylab("freq") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle("CNV spectra: professionally exposed to asbestos (mean)")
non_exp_cnv_plot <- as.data.frame(spectra2) %>%
rownames_to_column(var = "MuType") %>%
ggplot(aes(MuType, spectra2))+
geom_col()+
ylab("freq") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle("CNV spectra: NOT professionally exposed to asbestos (mean)")
exp_cnv_plot
non_exp_cnv_plot
spectra1 <- rowSums(CNV_matrix[,samples_exp], na.rm=TRUE)
spectra2 <- rowSums(CNV_matrix[,samples_nonexp], na.rm=TRUE)
exp_cnv_plot <- as.data.frame(spectra1) %>%
rownames_to_column(var = "MuType") %>%
ggplot(aes(MuType, spectra1))+
geom_col()+
ylab("count") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle("CNV spectra: professionally exposed to asbestos (sum)")
non_exp_cnv_plot <- as.data.frame(spectra2) %>%
rownames_to_column(var = "MuType") %>%
ggplot(aes(MuType, spectra2))+
geom_col()+
ylab("count") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle("CNV spectra: NOT professionally exposed to asbestos (sum)")
exp_cnv_plot
non_exp_cnv_plot
CNV_matrix
colSums(CNV_matrix) %>%
as.data.frame()
colSums(CNV_matrix) %>%
as.data.frame() %>%
ggplot(aes(.))+
geom_histogram()
setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github")
library(devtools)
library(roxygen2)
devtools::create("amSpecDist")
?is.matrix
?colMeans
?rbind
?ggplot
?tidyverse::ggplot
??ggplot
library(tidyverse)
?ggplot
?do.call
# STILL to Do
# install and test package
devtools::load_all()
# STILL to Do
# install and test package
setwd("amSpecDist")
devtools::load_all()
warnings()
devtools::load_all()
?ggplot
test <- 0
test %>% print()
getwd()
devtools::load_all()
test <- 0
test %>% print()
setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/AMSD_cancer_mutation_spectra/scripts")
# load data
samples <- read.table("../inputs/asbestos_sample_data.tsv", sep = "\t", header = TRUE)
asb_sigs <- read.table("../inputs/asbestos_signatures.txt", sep = "\t", header = TRUE)
asbestos_sbs_spectra <- readRDS("../inputs/asbestos_sbs_spectra.rds") %>%
rownames_to_column(var = "sample") %>%
separate(sample, c("sample","seq"), sep = "\\.") %>% # drop extra label
# filter(seq == "TN") %>%
select(-seq) %>%
column_to_rownames(var = "sample")
CNV_matrix <- read.table("../inputs/asbestos_CNVs.CNV48.matrix.tsv", sep = "\t", header = TRUE) %>%
column_to_rownames(var = "MutationType")
SV_matrix <- read.table("../inputs/asbestos_SVs.SV32.matrix.tsv", sep = "\t", header = TRUE) %>%
column_to_rownames(var = "MutationType")
samples
asbestos_sbs_spectra
CNV_matrix
SV_matrix
# which are exposed
samples %>%
count(Professional.Asbestos)
samples_exp <- filter(samples, Professional.Asbestos == "Exposed") %>%
separate(Sample, c("Sample", NA, NA), sep = "_T") %>%
pull(Sample)
samples_nonexp <- filter(samples, Professional.Asbestos == "Non exposed") %>%
separate(Sample, c("Sample", NA, NA), sep = "_T") %>%
pull(Sample)
# run AMSD on SBS
reps = 10000
spectra <- asbestos_sbs_spectra/rowSums(asbestos_sbs_spectra)
exp_spectra <- spectra[samples_exp[samples_exp %in% rownames(spectra)],]
nonexp_spectra <- spectra[samples_nonexp[samples_nonexp %in% rownames(spectra)],]
amsd_output_sbs_mean <- amsd(exp_spectra,
nonexp_spectra,
mean_or_sum = "mean",
n_sim = reps,
seed = 123)
plot_amsd_histogram(amsd_output_sbs_mean)
samples_exp
?plot_amsd_histogram
devtools::load_all()
getwd()
setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/amSpecDist")
devtools::load_all()
?cosine_dist
# document functions, then devtools::document()
devtools::document()
?cosine_dist
# document functions, then devtools::document()
devtools::document()
devtools::load_all()
?amsd
devtools::load_all()
devtools::load_all()
setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/amSpecDist")
devtools::load_all()
setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/AMSD_cancer_mutation_spectra/scripts")
# load data
samples <- read.table("../inputs/asbestos_sample_data.tsv", sep = "\t", header = TRUE)
asb_sigs <- read.table("../inputs/asbestos_signatures.txt", sep = "\t", header = TRUE)
asbestos_sbs_spectra <- readRDS("../inputs/asbestos_sbs_spectra.rds") %>%
rownames_to_column(var = "sample") %>%
separate(sample, c("sample","seq"), sep = "\\.") %>% # drop extra label
# filter(seq == "TN") %>%
select(-seq) %>%
column_to_rownames(var = "sample")
CNV_matrix <- read.table("../inputs/asbestos_CNVs.CNV48.matrix.tsv", sep = "\t", header = TRUE) %>%
column_to_rownames(var = "MutationType")
SV_matrix <- read.table("../inputs/asbestos_SVs.SV32.matrix.tsv", sep = "\t", header = TRUE) %>%
column_to_rownames(var = "MutationType")
samples
asbestos_sbs_spectra
CNV_matrix
SV_matrix
# which are exposed
samples %>%
count(Professional.Asbestos)
samples_exp <- filter(samples, Professional.Asbestos == "Exposed") %>%
separate(Sample, c("Sample", NA, NA), sep = "_T") %>%
pull(Sample)
samples_nonexp <- filter(samples, Professional.Asbestos == "Non exposed") %>%
separate(Sample, c("Sample", NA, NA), sep = "_T") %>%
pull(Sample)
# run AMSD on SBS
reps = 10000
spectra <- asbestos_sbs_spectra/rowSums(asbestos_sbs_spectra)
exp_spectra <- spectra[samples_exp[samples_exp %in% rownames(spectra)],]
nonexp_spectra <- spectra[samples_nonexp[samples_nonexp %in% rownames(spectra)],]
amsd_output_sbs_mean <- amsd(exp_spectra,
nonexp_spectra,
mean_or_sum = "mean",
n_sim = reps,
seed = 123)
reps = 1000
amsd_output_sbs_mean <- amsd(exp_spectra,
nonexp_spectra,
mean_or_sum = "mean",
n_sim = reps,
seed = 123)
amsd_output_sbs_mean <- amsd(exp_spectra,
nonexp_spectra,
mean_or_sum = "sum",
n_sim = reps,
seed = 123)
setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/amSpecDist")
amsd_output_sbs_mean
setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/amSpecDist")
devtools::load_all()
?amsd
?amsd
devtools::load_all()
?amsd
reload()
?amsd
devtools::load_all()
?amsd
?amsd
# install and test package
setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/amSpecDist")
devtools::load_all()
?amsd
devtools::document()
devtools::load_all()
?amsd
# load data
ancestry_amsd_output <- readRDS("../outputs/ancestry_amsd_output.rds")
anc_spectra <- readRDS("../outputs/ancestry_spectra.rds")
setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/AMSD_cancer_mutation_spectra/scripts")
# load data
ancestry_amsd_output <- readRDS("../outputs/ancestry_amsd_output.rds")
anc_spectra <- readRDS("../outputs/ancestry_spectra.rds")
View(anc_spectra)
library(tidyverse)
# ANCESTRY (anc2 excludes admixed, anc3 includes with closest ancestry group)
anc_calls <- read.table("../inputs/tcga_ancestry_calls.txt",
header=TRUE,
comment.char="",
sep = "\t") %>%
select(IID = patient, tumor_type, consensus_ancestry) %>%
mutate(anc2 = consensus_ancestry, anc3 = consensus_ancestry,) %>%
mutate(across(anc2, str_replace, 'afr_admix', 'admix')) %>%
mutate(across(anc2, str_replace, 'eas_admix', 'admix')) %>%
mutate(across(anc2, str_replace, 'sas_admix', 'admix')) %>%
mutate(across(anc2, str_replace, 'eur_admix', 'admix')) %>%
mutate(across(anc3, str_replace, 'afr_admix', 'afr')) %>%
mutate(across(anc3, str_replace, 'eas_admix', 'eas')) %>%
mutate(across(anc3, str_replace, 'sas_admix', 'sas')) %>%
mutate(across(anc3, str_replace, 'eur_admix', 'eur'))
# SPECTRA
tcga_3mer <- read.table("../inputs/tcga_mutation_spectra.txt",
sep="\t",
header = TRUE) %>%
separate(ID, into = c("a","b","c",NA,NA,NA,NA), sep = "-") %>%
mutate(IID = paste(a,b,c,sep = "-")) %>%
select(-a,-b,-c) %>%
select(IID, everything())
tcga_3mer_spectra <- tcga_3mer
tcga_3mer_spectra[,2:97] <- tcga_3mer[,2:97]/rowSums(tcga_3mer[,2:97])
tcga_3mer_spectra$mut_counts <- rowSums(select(tcga_3mer, -IID))
tcga_3mer$mut_counts <- rowSums(select(tcga_3mer, -IID))
# merge
anc_spectra <- inner_join(anc_calls, tcga_3mer_spectra)
anc_counts <- inner_join(anc_calls, tcga_3mer)
anc_counts
anc_counts %>%
filter(tumor_type == "LUAD") %>%
ggplot(aes(mut_counts))+
geom_histogram()
anc_counts %>%
filter(tumor_type == "LUAD") %>%
ggplot(aes(anc3, mut_counts))+
geom_boxplot()
anc_counts %>%
filter(tumor_type == "LUAD") %>%
ggplot(aes(anc3, mut_counts))+
geom_violin()
data("cosmic_signatures_v3.2")
library(sigfit)
data("cosmic_signatures_v3.2")
cosmic_signatures_v3.2
simulate_spectra <- function(n_samples = 1,
n_mutations = 100,
sig_probs = c(SBS1 = 0.3, SBS5 = 0.6, SBS18 = 0.1),
signatures,
additional_sig = NULL,
n_extra = 0,
seed = NULL) {
set.seed(seed)
# loop through samples and save 3mer counts
spectras <- list()
for (i in 1:n_samples) {
# Loop through each signature and sample 3mer counts
spectra <- c()
for(s in 1:length(sig_probs)){
# Which signature
sig <- names(sig_probs)[s]
sig_spectra <- signatures[sig,]
# Sample mutations from given signatures
mutations <- sample(names(sig_spectra),
size = (n_mutations) * sig_probs[sig],
replace = TRUE,
prob = sig_spectra)
spectra[[s]] <- table(factor(mutations, levels = names(sig_spectra)))
}
# Add additional mutations if applicable
if (!is.null(additional_sig) && n_extra[i] > 0) {
extra_mutations <- sample(names(signatures[additional_sig,]),
size = n_extra[i],
replace = TRUE,
prob = signatures[additional_sig,])
spectra[[length(sig_probs)+1]] <- table(factor(extra_mutations, levels = names(sig_spectra)))
}
spectras[[i]] <- colSums(do.call(rbind, spectra))
}
return(spectras)
}
simulate_spectra(signature = cosmic_signatures_v3.2)
simulate_spectra(samples = 3,signature = cosmic_signatures_v3.2)
simulate_spectra(n_samples = 3,signature = cosmic_signatures_v3.2)
simulate_spectra(n_samples = 3,signature = cosmic_signatures_v3.2) %>% class()
# install and test package
setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/amSpecDist")
# document functions, then devtools::document()
devtools::document()
?simulate_spectra
?simulate_spectra
reload()
devtools::document()
devtools::load_all()
?simulate_spectra_amsd
# document functions, then devtools::document()
devtools::document()
library(tidyverse)
setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/AMSD_cancer_mutation_spectra/scripts")
# load data from mouse paper (processed into spectra)
mouse_carcinogen_counts <- readRDS("../inputs/mouse_carcinogen_spectra.rds") # counts
mouse_carcinogen_spectra <- mouse_carcinogen_counts/rowSums(mouse_carcinogen_counts) # spectra
# list of samples and attributes
sample_table <- mouse_carcinogen_spectra %>%
rownames_to_column(var = "label") %>%
select(label) %>%
separate(label, c("tissue","rest"), sep = "_", extra = "merge", remove = FALSE) %>%
separate(rest,
into = c("exposure", "rep"),
sep = "_(?=\\d+$)", # Regex to split based on underscores near the end
extra = "merge",            # Handle extra columns by merging into one
fill = "right")             # Handle missing parts gracefully
sample_table
mouse_carcinogen_counts
mouse_carcinogen_spectra
devtools::use_data(mouse_carcinogen_spectra)
library(devtools)
library(roxygen2)
# install and test package
setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/mutspecdist")
mouse_sample_table <- sample_table
devtools::use_data(mouse_carcinogen_spectra)
devtools::use_data(mouse_sample_table)
getwd()
install.packages("usethis")
libarary(usethis)
library(usethis)
# install and test package
setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/mutspecdist")
mouse_sample_table <- sample_table
usethis::use_data(mouse_carcinogen_spectra)
usethis::use_data(mouse_sample_table)
mouse_carcinogen_spectra
# put on github
usethis::use_git()
usethis::use_github()
